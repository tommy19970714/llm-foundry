max_seq_len: 2048
global_seed: 17
tokenizer_name: cyberagent/open-calm-7b

# Run Name
run_name: dolly15j # If left blank, will be read from env var $COMPOSER_RUN_NAME

# Model
model:
  name: hf_causal_lm
  pretrained: true
  pretrained_model_name_or_path: cyberagent/open-calm-7b
  config_overrides:
    # WARNING: if setting `pretrained: true`, `max_position_embeddings` must match the
    # `max_position_embeddings` used during pre-training
    max_position_embeddings: ${max_seq_len}

# Tokenizer
tokenizer:
  name: ${tokenizer_name}
  kwargs:
    model_max_length: ${max_seq_len}

# Dataloaders
train_loader:
  name: finetuning
  dataset:
    hf_name: kunishou/databricks-dolly-15k-ja
    split: train
    tokenizer_name: ${tokenizer_name}
    max_seq_len: ${max_seq_len}
    allow_pad_trimming: false
    decoder_only_format: true
    # # Use `python llmfoundry/data/packing.py --yaml-path /path/to/this/yaml/ ...`
    # # to profile this run's optimal packing_ratio as it depends on GPU count,
    # # batch size, sequence length
    # packing_ratio:
    shuffle: true
  drop_last: true
  num_workers: 8
  pin_memory: false
  prefetch_factor: 2
  persistent_workers: true
  timeout: 0

# eval_loader:
#   name: finetuning
#   dataset:
#     hf_name: tommy19970714/alpaca_ja
#     split: train
#     tokenizer_name: ${tokenizer_name}
#     max_seq_len: ${max_seq_len}
#     allow_pad_trimming: false
#     decoder_only_format: true
#     # packing_ratio:
#     shuffle: true
#   drop_last: true
#   num_workers: 8
#   pin_memory: false
#   prefetch_factor: 2
#   persistent_workers: true
#   timeout: 0

# Optimization
scheduler:
  name: cosine_with_warmup
  t_warmup: 100ba
  alpha_f: 0.1

optimizer:
  name: decoupled_adamw
  lr: 6.0e-4
  betas:
  - 0.9
  - 0.95
  eps: 1.0e-08
  weight_decay: 0.0

algorithms:
  gradient_clipping:
    clipping_type: norm
    clipping_threshold: 1.0


max_duration: 3ep  # 2-3 epochs seems like the sweet spot
eval_interval: 1 # this is the only allowed value for no eval
# eval_subset_num_batches: -1
# eval_first: true
global_train_batch_size: 48  # somewhere in the 6-8 * numgpus range seems good

# System
seed: ${global_seed}
device_eval_batch_size: 4
device_train_microbatch_size: 4
# device_train_microbatch_size: auto
precision: amp_bf16

# FSDP
fsdp_config:
  sharding_strategy: FULL_SHARD
  mixed_precision: PURE
  activation_checkpointing: false
  activation_checkpointing_reentrant: false
  activation_cpu_offload: false
  limit_all_gathers: true
  verbose: false

# Logging
progress_bar: false
log_to_console: true
console_log_interval: 1ba

callbacks:
  speed_monitor:
    window_size: 10
  lr_monitor: {}
  memory_monitor: {}
  runtime_estimator: {}

loggers:
  wandb: {}

# Checkpoint to local filesystem or remote object store
save_interval: 200ba
# save_num_checkpoints_to_keep: 1  # Important, this cleans up checkpoints saved to DISK
save_folder: /home/mosaicml/{run_name}/checkpoints
# save_folder: s3://my-bucket/my-folder/{run_name}/checkpoints

# Load from local filesystem or remote object store
# load_path: ./gpt-125m/checkpoints/latest-rank{rank}.pt
# load_path: s3://my-bucket/my-folder/gpt-125m/checkpoints/latest-rank{rank}.pt
